<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="me.deipss.jvm.sandbox.inspector.debug.provider.dal.classicmodel.EmployeesMapper">
  <resultMap id="BaseResultMap" type="me.deipss.jvm.sandbox.inspector.debug.provider.dal.entity.classicmodel.Employees">
    <!--@mbg.generated-->
    <!--@Table employees-->
    <id column="employeeNumber" jdbcType="INTEGER" property="employeenumber" />
    <result column="lastName" jdbcType="VARCHAR" property="lastname" />
    <result column="firstName" jdbcType="VARCHAR" property="firstname" />
    <result column="extension" jdbcType="VARCHAR" property="extension" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="officeCode" jdbcType="VARCHAR" property="officecode" />
    <result column="reportsTo" jdbcType="INTEGER" property="reportsto" />
    <result column="jobTitle" jdbcType="VARCHAR" property="jobtitle" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    employeeNumber, lastName, firstName, extension, email, officeCode, reportsTo, jobTitle
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update employees
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="lastName = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.lastname,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="firstName = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.firstname,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="extension = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.extension,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="email = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.email,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="officeCode = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.officecode,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="reportsTo = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.reportsto,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="jobTitle = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when employeeNumber = #{item.employeenumber,jdbcType=INTEGER} then #{item.jobtitle,jdbcType=VARCHAR}
        </foreach>
      </trim>
    </trim>
    where employeeNumber in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.employeenumber,jdbcType=INTEGER}
    </foreach>
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated-->
    insert into employees
    (employeeNumber, lastName, firstName, extension, email, officeCode, reportsTo, jobTitle
      )
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.employeenumber,jdbcType=INTEGER}, #{item.lastname,jdbcType=VARCHAR}, #{item.firstname,jdbcType=VARCHAR}, 
        #{item.extension,jdbcType=VARCHAR}, #{item.email,jdbcType=VARCHAR}, #{item.officecode,jdbcType=VARCHAR}, 
        #{item.reportsto,jdbcType=INTEGER}, #{item.jobtitle,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <insert id="insertOrUpdate" parameterType="me.deipss.jvm.sandbox.inspector.debug.provider.dal.entity.classicmodel.Employees">
    <!--@mbg.generated-->
    insert into employees
    (employeeNumber, lastName, firstName, extension, email, officeCode, reportsTo, jobTitle
      )
    values
    (#{employeenumber,jdbcType=INTEGER}, #{lastname,jdbcType=VARCHAR}, #{firstname,jdbcType=VARCHAR}, 
      #{extension,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{officecode,jdbcType=VARCHAR}, 
      #{reportsto,jdbcType=INTEGER}, #{jobtitle,jdbcType=VARCHAR})
    on duplicate key update 
    employeeNumber = #{employeenumber,jdbcType=INTEGER}, 
    lastName = #{lastname,jdbcType=VARCHAR}, 
    firstName = #{firstname,jdbcType=VARCHAR}, 
    extension = #{extension,jdbcType=VARCHAR}, 
    email = #{email,jdbcType=VARCHAR}, 
    officeCode = #{officecode,jdbcType=VARCHAR}, 
    reportsTo = #{reportsto,jdbcType=INTEGER}, 
    jobTitle = #{jobtitle,jdbcType=VARCHAR}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="me.deipss.jvm.sandbox.inspector.debug.provider.dal.entity.classicmodel.Employees">
    <!--@mbg.generated-->
    insert into employees
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="employeenumber != null">
        employeeNumber,
      </if>
      <if test="lastname != null">
        lastName,
      </if>
      <if test="firstname != null">
        firstName,
      </if>
      <if test="extension != null">
        extension,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="officecode != null">
        officeCode,
      </if>
      <if test="reportsto != null">
        reportsTo,
      </if>
      <if test="jobtitle != null">
        jobTitle,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="employeenumber != null">
        #{employeenumber,jdbcType=INTEGER},
      </if>
      <if test="lastname != null">
        #{lastname,jdbcType=VARCHAR},
      </if>
      <if test="firstname != null">
        #{firstname,jdbcType=VARCHAR},
      </if>
      <if test="extension != null">
        #{extension,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="officecode != null">
        #{officecode,jdbcType=VARCHAR},
      </if>
      <if test="reportsto != null">
        #{reportsto,jdbcType=INTEGER},
      </if>
      <if test="jobtitle != null">
        #{jobtitle,jdbcType=VARCHAR},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="employeenumber != null">
        employeeNumber = #{employeenumber,jdbcType=INTEGER},
      </if>
      <if test="lastname != null">
        lastName = #{lastname,jdbcType=VARCHAR},
      </if>
      <if test="firstname != null">
        firstName = #{firstname,jdbcType=VARCHAR},
      </if>
      <if test="extension != null">
        extension = #{extension,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="officecode != null">
        officeCode = #{officecode,jdbcType=VARCHAR},
      </if>
      <if test="reportsto != null">
        reportsTo = #{reportsto,jdbcType=INTEGER},
      </if>
      <if test="jobtitle != null">
        jobTitle = #{jobtitle,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
</mapper>